{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./lib/2048.js","webpack:///./lib/board.js","webpack:///./lib/game.js","webpack:///./lib/tile.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAA6B;;;AAG7B;AACA,iBAAiB,gDAAI;AACrB;AACA;AACA,CAAC;;;;;;;;;;;;;ACPD;AAAA;AAAA;AAA6B;;AAEd;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,sBAAsB;AACzC,qBAAqB,yBAAyB;AAC9C;AACA,yBAAyB,WAAW;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,gDAAI,8BAA8B,mBAAmB;AACzF,kDAAkD;AAClD;AACA;;AAEA;AACA,mDAAmD,gDAAI;AACvD;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,OAAO;AAC1B,4BAA4B,gDAAI,0BAA0B,gDAAI;AAC9D,qBAAqB,gDAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,OAAO;AAC1B,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,sBAAsB;AACzC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,OAAO;AAC1B,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mDAAmD,WAAW,iBAAiB,eAAe,GAAG,eAAe;AAChH;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL,kDAAkD,uCAAuC,GAAG,uCAAuC;AACnI,kDAAkD,uCAAuC,GAAG,uCAAuC;AACnI,mDAAmD,WAAW,iBAAiB,eAAe,GAAG,eAAe;AAChH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA,yDAAyD,WAAW,iBAAiB,mBAAmB,GAAG,mBAAmB;AAC9H,mDAAmD,WAAW,iBAAiB,eAAe,GAAG,eAAe;AAChH,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA,0CAA0C,WAAW;AACrD,KAAK;AACL;;AAEA;;;;;;;;;;;;;ACzJA;AAAA;AAAA;AAAA;AAA+B;AACF;;;AAGd;AACf;AACA,qBAAqB,iDAAK;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,yBAAyB,oBAAoB;AAC7C,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B,gDAAI;AAChC;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA,sBAAsB,OAAO;AAC7B,wBAAwB,OAAO;AAC/B;AACA,6DAA6D;AAC7D;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,qBAAqB,OAAO;AAC5B,uBAAuB,OAAO;AAC9B,+CAA+C,gDAAI;AACnD,yCAAyC;AACzC,4DAA4D;AAC5D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ,2BAA2B,oBAAoB;AAC/C,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB,OAAO;AAC5B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACvPA;AAAA;AAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"./lib/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./lib/2048.js\");\n","import Game from './game.js';\n\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  let game = new Game();\n  game.setup();\n  game.play();\n});\n","import Tile from './tile.js';\n\nexport default class Board {\n  constructor() {\n    this.grid = [\n      [0,0,0,0],\n      [0,0,0,0],\n      [0,0,0,0],\n      [0,0,0,0]\n    ];\n    this.tileIds = {};\n    this.score = 0;\n    this.previousBoard = null;\n    this.position = [[]];\n    this.scoreTag = document.getElementById(\"score\");\n    this.newTile = [];\n  }\n\n  addNumber() {\n    let unfilled = [];\n    for (let i = 0; i < this.grid.length; i++) {\n      for (let j = 0; j < this.grid[i].length; j++) {\n        if (this.grid[i][j] === 0) {\n          unfilled.push({x: i, y: j});\n        }\n      }\n    }\n    if (unfilled.length > 0) {\n      let idx = unfilled[Math.floor(Math.random() * unfilled.length)];\n      let randNum = Math.floor(Math.random() * 5) > 2 ? 4 : 2;\n      this.grid[idx.x][idx.y] = new Tile(randNum, false, true, null, {x: idx.x, y: idx.y}, null, Math.random(), null);\n      this.tileIds[this.grid[idx.x][idx.y].id] = {x: idx.x, y: idx.y};\n    }\n  }\n\n  slide(row, rowPos) {\n    const arr = row.filter(cell => cell instanceof Tile);\n    const unfilled = Array(4 - arr.length).fill(0);\n    const newArr = unfilled.concat(arr);\n    return newArr;\n  }\n\n  combine(row, rowPos) {\n    for (var i = 3; i > 0; i--) {\n      if (row[i] instanceof Tile && row[i - 1] instanceof Tile && row[i].value === row[i - 1].value) {\n        row[i] = new Tile(row[i].value * 2, true, false, null, null, null, Math.random(), [row[i].id, row[i - 1].id]);\n        // row[i].mergedFrom = [row[i].id, row[i - 1].id];\n        row[i - 1] = 0;\n        this.score += row[i].value;\n      }\n    }\n    return row;\n  }\n\n  inverse() {\n    let newGrid = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0]\n    ];\n\n    for (var i = 0; i < 4; i++) {\n      for (var j = 0; j < 4; j++) {\n        newGrid[i][j] = this.grid[j][i];\n      }\n    }\n    return newGrid;\n  }\n\n  reverse() {\n    for (let i = 0; i < this.grid.length; i++) {\n      this.grid[i].reverse();\n    }\n  }\n\n  prevBoard() {\n    let prevGrid = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0]\n    ];\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        prevGrid[i][j] = this.grid[i][j];\n      }\n    }\n    return prevGrid;\n  }\n\n  fillNumbers() {\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (this.grid[i][j]) {\n          this.addTile(this.grid[i][j], [i, j]);\n        }\n      }\n    }\n\n    this.newTile.forEach(tile => {\n      let tileOuter = document.createElement('div');\n      let tileInner = document.createElement('div');\n\n      tileOuter.setAttribute('class', `tile tile-${tile.value} tile-position-${tile.pos.x + 1}-${tile.pos.y + 1} new`);\n      tileInner.setAttribute('class', 'tile-inner');\n      tileInner.innerHTML = tile.value;\n      let tileContainer = document.querySelectorAll('.tile-container')[0];\n      tileOuter.appendChild(tileInner);\n      tileContainer.appendChild(tileOuter);\n    });\n\n    this.newTile = [];\n\n  }\n\n  addTile(tile, pos) {\n    let tileOuter = document.createElement('div');\n    let tileInner = document.createElement('div');\n\n    if (tile.isNew) {\n      this.newTile.push(tile);\n    } else if (tile.merged) {\n\n      document.querySelectorAll(`.tile-position-${this.tileIds[tile.mergedFrom[0]].x + 1}-${this.tileIds[tile.mergedFrom[0]].y + 1}`)[0].remove();\n      document.querySelectorAll(`.tile-position-${this.tileIds[tile.mergedFrom[1]].x + 1}-${this.tileIds[tile.mergedFrom[1]].y + 1}`)[0].remove();\n      tileOuter.setAttribute('class', `tile tile-${tile.value} tile-position-${tile.pos.x + 1}-${tile.pos.y + 1} merged`);\n      tileInner.setAttribute('class', 'tile-inner');\n      tileInner.innerHTML = tile.value;\n      let tileContainer = document.querySelectorAll('.tile-container')[0];\n      tileOuter.appendChild(tileInner);\n      tileContainer.appendChild(tileOuter);\n      let mergedId = tile.mergedFrom;\n      tile.mergedFrom.forEach(id => {\n        delete this.tileIds[id];\n      });\n    } else {\n        window.requestAnimationFrame(() => {\n          let tileP = document.querySelectorAll(`.tile-${tile.value}.tile-position-${tile.prevPos.x + 1}-${tile.prevPos.y + 1}`)[0];\n          tileP.setAttribute('class', `tile tile-${tile.value} tile-position-${tile.pos.x + 1}-${tile.pos.y + 1}`);\n        });\n    }\n  }\n\n  drawBoard() {\n    window.requestAnimationFrame(() => {\n      let tileContainer = document.querySelectorAll('.tile-container')[0];\n      this.fillNumbers();\n      this.scoreTag.innerHTML = `Score: ${this.score}`;\n    });\n  }\n\n}\n","import Board from './board.js';\nimport Tile from './tile.js';\n\n\nexport default class Game {\n  constructor() {\n    this.board = new Board();\n\n    this.handleKey = this.handleKey.bind(this);\n    this.handlePress = this.handlePress.bind(this);\n    this.handleSwipe = this.handleSwipe.bind(this);\n    this.handleSwipeEnd = this.handleSwipeEnd.bind(this);\n    this.start = null;\n    this.down = false;\n  }\n\n  setup() {\n    this.board.addNumber();\n    this.board.addNumber();\n    // console.log(this.board.grid);\n    // console.log(this.board.tileIds);\n    // let invertedBoard = this.board.inverse();\n    // console.log(`------------------------------`);\n    // let tileStr = '';\n    // invertedBoard.forEach(row => {\n    //   let tileArr = [];\n    //   row.forEach(tile => {\n    //     tileArr.push(tile instanceof Tile ? tile.value : 0);\n    //   });\n    //   tileStr += `| ${tileArr.join(' | ')} |\\n`;\n    // });\n    // console.log(tileStr);\n    // console.log(`------------------------------`);\n    this.board.drawBoard();\n  }\n\n  handleKey(e) {\n    let flipped = false;\n    let inversed = false;\n    let pressed = false;\n\n    this.board.grid.forEach(row => {\n      row.forEach(tile => {\n        if (tile instanceof Tile) {\n          tile.prevPos = tile.pos;\n          tile.isNew = false;\n          tile.merged = false;\n          tile.mergedFrom = null;\n        }\n      })\n    });\n\n    // this.board.tileIds = {};\n    //\n    // for (let i = 0; i < 4; i++) {\n    //   for (let j = 0; j < 4; j++) {\n    //     if (this.board.grid[i][j] instanceof Tile) {\n    //       this.board.tileIds[this.board.grid[i][j].id] = {x: i, y: j};\n    //     }\n    //   }\n    // }\n\n    switch(e.code) {\n      case \"ArrowUp\":\n        this.board.reverse();\n\n        flipped = true;\n        pressed = true;\n        break;\n      case \"ArrowDown\":\n        pressed = true;\n\n\n        break;\n      case \"ArrowRight\":\n        this.board.grid = this.board.inverse();\n        // debugger\n        inversed = true;\n        pressed = true;\n\n\n        break;\n      case \"ArrowLeft\":\n        this.board.grid = this.board.inverse();\n        this.board.reverse();\n        // debugger\n        inversed = true;\n        flipped = true;\n        pressed = true;\n        break;\n    }\n\n    if (pressed) {\n      for (var i = 0; i < 4; i++) {\n        this.board.grid[i] = this.board.slide(this.board.grid[i], i);\n        this.board.grid[i] = this.board.combine(this.board.grid[i], i);\n        this.board.grid[i] = this.board.slide(this.board.grid[i], i);\n      }\n\n      if (flipped) {\n        this.board.reverse();\n      }\n\n      if (inversed) {\n        this.board.grid = this.board.inverse();\n      }\n\n      for (let i = 0; i < 4; i++) {\n        for (let j = 0; j < 4; j++) {\n          if (this.board.grid[i][j] instanceof Tile) {\n            this.board.grid[i][j].pos = {x: i, y: j};\n            this.board.tileIds[this.board.grid[i][j].id] = {x: i, y: j};\n          }\n        }\n      }\n\n      this.board.addNumber();\n      this.board.drawBoard();\n      // console.log(this.board.grid);\n      // console.log(this.board.tileIds);\n      // let invertedBoard = this.board.inverse();\n      // console.log(`------------------------------`);\n      // let tileStr = '';\n      // invertedBoard.forEach(row => {\n      //   let tileArr = [];\n      //   row.forEach(tile => {\n      //     tileArr.push(tile instanceof Tile ? tile.value : 0);\n      //   });\n      //   tileStr += `| ${tileArr.join(' | ')} |\\n`;\n      // });\n      // console.log(tileStr);\n      // console.log(`------------------------------`);\n    }\n  }\n\n  handlePress(e) {\n    if (this.down) return;\n    e.preventDefault();\n    this.down = true;\n    // debugger\n    if (this.gameOver()) {\n      // document.getElementById('game-over').style.opacity = 1;\n      // document.getElementById('game-over').style.transition = \"all 2s\";\n      // document.getElementById('game-over').innerHTML = \"Game Over!\";\n      // document.getElementById('over').style.display = 'block';\n      document.querySelectorAll('.game-over')[0].style.visibility = 'visible';\n      document.querySelectorAll('.game-over')[0].innerHTML = 'Game Over!'\n      this.removeKeyPress();\n    } else {\n      this.handleKey(e);\n    }\n    this.down = false;\n    // debugger\n  }\n\n  handleSwipe(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    if(e.touches.length === 1){\n      //just one finger touched\n      this.start = e.touches.item(0).clientX;\n      this.startY = e.touches.item(0).clientY;\n    }\n  }\n\n  handleSwipeEnd(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    var offset = 100;//at least 100px are a swipe\n    if(this.start){\n      //the only finger that hit the screen left it\n      var end = event.changedTouches.item(0).clientX;\n      var endY = event.changedTouches.item(0).clientY;\n\n      let flipped = false;\n      let inversed = false;\n      let pressed = false;\n\n      if(end > this.start + offset){\n       //a left -> right swipe\n       this.board.grid = this.board.inverse();\n       inversed = true;\n       pressed = true;\n      }\n      if(end < this.start - offset ){\n       //a right -> left swipe\n       this.board.grid = this.board.inverse();\n       this.board.reverse();\n       inversed = true;\n       flipped = true;\n       pressed = true;\n      }\n      if(endY > this.startY + offset) {\n        pressed = true;\n      }\n      if(endY < this.startY - offset) {\n        this.board.reverse();\n        flipped = true;\n        pressed = true;\n      }\n\n      for (var i = 0; i < 4; i++) {\n        this.board.grid[i] = this.board.slide(this.board.grid[i], i);\n        this.board.grid[i] = this.board.combine(this.board.grid[i], i);\n        this.board.grid[i] = this.board.slide(this.board.grid[i], i);\n      }\n\n      if (flipped) {\n        this.board.reverse();\n      }\n\n      if (inversed) {\n        this.board.grid = this.board.inverse();\n      }\n      this.board.addNumber();\n      this.board.drawBoard();\n    }\n  }\n\n  removeKeyPress() {\n    window.removeEventListener(\"keydown\", this.handlePress);\n  }\n\n  addKeyPress() {\n    window.addEventListener('keydown', this.handlePress);\n  }\n\n  play() {\n    this.addKeyPress();\n    window.addEventListener(\"touchstart\", this.handleSwipe);\n    window.addEventListener(\"touchend\", this.handleSwipeEnd);\n  }\n\n  gameOver() {\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (this.board.grid[i][j] === 0) {\n          return false;\n        }\n\n        if (j < 3 && (this.board.grid[i][j].value === this.board.grid[i][j + 1].value || this.board.inverse()[i][j].value === this.board.inverse()[i][j + 1].value)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n}\n","export default class tile {\n  constructor(value, merged, isNew, movedFrom, pos, prevPos, id, mergedFrom) {\n    this.value = value;\n    this.merged = merged;\n    this.isNew = isNew;\n    this.mergedFrom = mergedFrom;\n    this.movedFrom = movedFrom;\n    this.pos = pos;\n    this.prevPos = prevPos;\n    this.id = id;\n  }\n}\n"],"sourceRoot":""}